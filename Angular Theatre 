import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class TheatreService {
  apiUrl = `${environment.apiUrl}/theatre`; // Make sure the environment variable is set correctly

  constructor(private http: HttpClient) { }

  getTheatres(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  getTheatre(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/id/${id}`);
  }

  getTheatresByCity(city: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/city/${city}`);
  }

  addTheatre(theatre: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, theatre);
  }

  editTheatre(theatre: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/id/${theatre.id}`, theatre);
  }

  deleteTheatre(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/id/${id}`);
  }
}


import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { TheatreService } from '../../services/theatre.service';

@Component({
  selector: 'app-theatres-management',
  templateUrl: './theatres-management.component.html',
  styleUrls: ['./theatres-management.component.css']
})
export class TheatresManagementComponent implements OnInit {
  theatres: any[] = [];
  selectedTheatre: any = {};
  isEdit = false;

  constructor(
    private modalService: NgbModal,
    private theatreService: TheatreService
  ) {}

  ngOnInit(): void {
    this.loadTheatres();
  }

  loadTheatres(): void {
    this.theatreService.getTheatres().subscribe(theatres => {
      this.theatres = theatres;
    });
  }

  openModal(content: any, theatre?: any): void {
    if (theatre) {
      this.isEdit = true;
      this.selectedTheatre = { ...theatre };
    } else {
      this.isEdit = false;
      this.selectedTheatre = {};
    }
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  onSubmit(form: NgForm): void {
    if (form.valid) {
      if (this.isEdit) {
        this.theatreService.editTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      } else {
        this.theatreService.addTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      }
    }
  }

  editTheatre(content: any, theatre: any): void {
    this.openModal(content, theatre);
  }

  deleteTheatre(theatre: any): void {
    if (confirm('Are you sure you want to delete this theatre?')) {
      this.theatreService.deleteTheatre(theatre.id).subscribe(() => {
        this.loadTheatres();
      });
    }
  }
}


<div class="container">
  <h2>Theatres Management</h2>
  <button class="btn btn-primary mb-3" (click)="openModal(theatreModal)">Add Theatre</button>
  <table class="table table-bordered table-striped">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>City</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let theatre of theatres">
        <td>{{ theatre.id }}</td>
        <td>{{ theatre.name }}</td>
        <td>{{ theatre.city }}</td>
        <td>
          <button class="btn btn-warning mr-2" (click)="editTheatre(theatreModal, theatre)">Edit</button>
          <button class="btn btn-danger" (click)="deleteTheatre(theatre)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

  <ng-template #theatreModal let-modal>
    <div class="modal-header">
      <h4 class="modal-title">{{ isEdit ? 'Edit Theatre' : 'Add Theatre' }}</h4>
      <button type="button" class="close" aria-label="Close" (click)="modal.dismiss('Cross click')">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body">
      <form #theatreForm="ngForm" (ngSubmit)="onSubmit(theatreForm)">
        <div class="form-group">
          <label for="name">Name</label>
          <input
            type="text"
            class="form-control"
            id="name"
            name="name"
            [(ngModel)]="selectedTheatre.name"
            required
          />
        </div>
        <div class="form-group">
          <label for="city">City</label>
          <input
            type="text"
            class="form-control"
            id="city"
            name="city"
            [(ngModel)]="selectedTheatre.city"
            required
          />
        </div>
        <button type="submit" class="btn btn-primary">{{ isEdit ? 'Update' : 'Add' }}</button>
        <button type="button" class="btn btn-secondary" (click)="modal.dismiss('Cancel click')">Cancel</button>
      </form>
    </div>
  </ng-template>
</div>