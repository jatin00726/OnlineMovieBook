---AccountController---

using Book_My_Show_DAL.Context;
using Book_My_Show_Entities;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Providers.Entities;

namespace Book_My_Show.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : ControllerBase
    {
        private AccountContext db = new AccountContext();
        [HttpPost("Login")]
        public async Task<ActionResult> Login(UserModel user)
        {

            var result = GetUserbyNameandPassword(user);
            //if (result.)
            //{
            //    return Ok(new { Message = result });
            //}
            return Ok(new {Role = result.Role });
        }
        [HttpPost("CreateUser")]

        public async Task<ActionResult> CreateUser(UserModel user)
        {

            var result = AddUser(user);
            //if (!result.Success)
            //{
            //    return BadRequest(result.Message);
            //}
            return Ok(new { UserId = result.UserId, Message = result });
        }

        [HttpPost("CreateAdmin")]

        public async Task<ActionResult> CreateAdmin(UserModel user)
        {

            var result = AddAdmin(user);
            //if (!result.Success)
            //{
            //    return BadRequest(result.Message);
            //}
            return Ok(new { UserId = result.UserId, Message = result });
        }

        [HttpGet("CreateUser")]
        public UserModel GetUserbyNameandPassword(UserModel user)
        {
            return db.Users.FirstOrDefault(u => u.Username == user.Username && u.Password == user.Password);
        }

        [HttpGet("Adduser")]
        public UserModel AddUser(UserModel objUser)
        {
            objUser.Role = "User";
            db.Users.Add(objUser);
            db.SaveChanges();
            return objUser;
        }

        [HttpGet("Addadmin")]
        public UserModel AddAdmin(UserModel objUser)
        {
            objUser.Role = "Admin";
            db.Users.Add(objUser);
            db.SaveChanges();
            return objUser;
        }

        [HttpGet("Logout")]
        public async Task<IActionResult> LogOut()
        {
            //SignOutAsync is Extension method for SignOut    
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            //Redirect to home page    
            return LocalRedirect("/");
        }

    }
}

---AdminComponent---
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service'; // Adjust the path as necessary

@Component({
  selector: 'app-admin-dashboard',
  templateUrl: './admin-dashboard.component.html',
  styleUrl: './admin-dashboard.component.css'
})
export class AdminDashboardComponent {
  constructor(private authService: AuthService, private router: Router) {}

  logout() {
    this.authService.logout().subscribe(() => {
      this.router.navigate(['/login']);
    });
  }
  toggleSidebar() {
    const sidebar = document.getElementById('sidebarMenu');
    const mainContent = document.getElementById('mainContent');
    if (sidebar && mainContent) {
      sidebar.classList.toggle('collapsed');
      mainContent.classList.toggle('collapsed');
    }
  }
}


---AuthService--
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private authUrl = 'https://localhost:44353/api/Account/';

  constructor(private http: HttpClient) { }

  login(credentials: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}` +"Login", credentials).pipe(
      tap(response => {
        if (response.role) {
          //localStorage.setItem('token', response.token);
          localStorage.setItem('role', response.role);
        }
      })
    );
  }

  registerUser(user: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}CreateUser`, user);
  }

  registerAdmin(user: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}CreateAdmin`, user);
  }

  logout(): Observable<any> {
    return this.http.get(`${this.authUrl}Logout`).pipe(
      tap(() => {
        localStorage.removeItem('token');
        localStorage.removeItem('role');
      })
    );
  }

  isAuthenticated(): boolean {
    return !!localStorage.getItem('token');
  }

  getUserRole(): string | null {
    return localStorage.getItem('role');
  }
}



after clicking on the logout button it is not redirecting to the login page. Also update the Logout in AccountCOntroller to return the appropriate link

@if (User.Identity.IsAuthenticated)
{
 
    using (Html.BeginForm("LogOut", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
    {
        @Html.AntiForgeryToken()
 
        <ul class="navbar-nav navbar-right">
<li>
                @Html.ActionLink("Hello " + User.Identity.Name + "!", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage", @class = "nav-link" })
</li>
<li><a class="nav-link" href="javascript:document.getElementById('logoutForm').submit()">Log off</a></li>
</ul>

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private authUrl = 'https://localhost:44353/api/Account/';

  constructor(private http: HttpClient) { }

  login(credentials: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}` +"Login", credentials).pipe(
      tap(response => {
        if (response.role) {
          //localStorage.setItem('token', response.token);
          localStorage.setItem('role', response.role);
        }
      })
    );
  }

  registerUser(user: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}CreateUser`, user);
  }

  registerAdmin(user: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}CreateAdmin`, user);
  }

  logout(): Observable<any> {
    return this.http.get(`${this.authUrl}Logout`).pipe(
      tap(() => {
        localStorage.removeItem('token');
        localStorage.removeItem('role');
      })
    );
  }

  isAuthenticated(): boolean {
    return !!localStorage.getItem('token');
  }

  getUserRole(): string | null {
    return localStorage.getItem('role');
  }
}

[HttpPost("Login")]
public async Task<ActionResult> Login(UserModel user)
{

    var result = GetUserbyNameandPassword(user);
    //if (result.)
    //{
    //    return Ok(new { Message = result });
    //}
    var claims = new List<Claim> {
        new Claim(ClaimTypes.NameIdentifier, Convert.ToString(result.UserId)),
        new Claim(ClaimTypes.Name, result.Username)
    };
    //Initialize a new instance of the ClaimsIdentity with the claims and authentication scheme    
    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
    //Initialize a new instance of the ClaimsPrincipal with ClaimsIdentity    
    var principal = new ClaimsPrincipal(identity);

    //SignInAsync is a Extension method for Sign in a principal for the specified scheme.    
    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties());
    return Ok(new { Role = result.Role });
}
[HttpPost("CreateUser")]

public async Task<ActionResult> CreateUser(UserModel user)
{

    var result = AddUser(user);
    //if (!result.Success)
    //{
    //    return BadRequest(result.Message);
    //}            
    return Ok(new { UserId = result.UserId, Message = result });
}

[HttpPost("CreateAdmin")]

public async Task<ActionResult> CreateAdmin(UserModel user)
{

    var result = AddAdmin(user);
    //if (!result.Success)
    //{
    //    return BadRequest(result.Message);
    //}
    return Ok(new { UserId = result.UserId, Message = result });
}

[HttpGet("CreateUser")]
public UserModel GetUserbyNameandPassword(UserModel user)
{
    return db.Users.FirstOrDefault(u => u.Username == user.Username && u.Password == user.Password);
}

[HttpGet("Adduser")]
public UserModel AddUser(UserModel objUser)
{
    objUser.Role = "User";
    db.Users.Add(objUser);
    db.SaveChanges();
    return objUser;
}

[HttpGet("Addadmin")]
public UserModel AddAdmin(UserModel objUser)
{
    objUser.Role = "Admin";
    db.Users.Add(objUser);
    db.SaveChanges();
    return objUser;
}

[HttpGet("Logout")]
public async Task<IActionResult> LogOut()
{
    //SignOutAsync is Extension method for SignOut    
    await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
    //Redirect to home page    
    return Ok(new { message = "User LOgged Out" });
}
