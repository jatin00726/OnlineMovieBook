---TheaterHTML---
<div class="container card">
  <div class="col-md-20">
    <h2>Theatres Management</h2>
    <div class="form-group">
        <label for="citySelect">Select City</label>
        <select
          id="citySelect"
          class="form-control"
          [(ngModel)]="selectedCity"
          (ngModelChange)="onCityChange($event)"
        >
          <option value="">All Cities</option>
          <option *ngFor="let city of cities" [value]="city">{{ city }}</option>
        </select>
      
      </div>
    <button class="btn btn-primary mb-3" (click)="openModal(theatreModal)">Add Theatre</button>
    <table class="table table-bordered table-striped">
      <thead>
        <tr>
          <!-- <th>ID</th> -->
          <th>Name</th>
          <th>City</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let theatre of theatres">
          <!-- <td>{{ theatre.id }}</td> -->
          <td>{{ theatre.name }}</td>
          <td>{{ theatre.city }}</td>
          <td>
            <button class="btn btn-warning mr-2" (click)="editTheatre(theatreModal, theatre)">Edit</button>
            <button class="btn btn-danger ml-2" (click)="deleteTheatre(theatre)">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>
  
    <ng-template #theatreModal let-modal>
      <div class="modal-header">
        <h4 class="modal-title">{{ isEdit ? 'Edit Theatre' : 'Add Theatre' }}</h4>
        <button type="button" class="close" aria-label="Close" (click)="modal.dismiss('Cross click')">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form #theatreForm="ngForm" (ngSubmit)="onSubmit(theatreForm)">
          <div class="form-group">
            <label for="name">Name</label>
            <input
              type="text"
              class="form-control"
              id="name"
              name="name"
              [(ngModel)]="selectedTheatre.name"
              required
            />
          </div>
          <div class="form-group">
            <label for="city">City</label>
            <input
              type="text"
              class="form-control"
              id="city"
              name="city"
              [(ngModel)]="selectedTheatre.city"
              required
            />
          </div>
          <button type="submit" class="btn btn-primary">{{ isEdit ? 'Update' : 'Add' }}</button>
          <button type="button" class="btn btn-secondary" (click)="modal.dismiss('Cancel click')">Cancel</button>
        </form>
      </div>
    </ng-template>
  </div>
</div>


---TheatreComponent---
import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { TheatreService } from '../../services/theatre.service';

@Component({
  selector: 'app-theatres-management',
  templateUrl: './theatres-management.component.html',
  styleUrls: ['./theatres-management.component.css']
})
export class TheatresManagementComponent implements OnInit {
  theatres: any[] = [];
  cities: any[]=['Hyderabad',
    'Delhi',
    'Mumbai',
    'Bangalore',
    'Chennai',
    'Pune',
    'Kolkata'];
  selectedTheatre: any = {};
  selectedCity:string='';
  isEdit = false;

  constructor(
    private modalService: NgbModal,
    private theatreService: TheatreService
  ) {}

  ngOnInit(): void {
   
    this.loadTheatres();
  }

  loadTheatresByCity(city:string):void {
    if(city){
      this.theatreService.getTheatresByCity(city).subscribe(theatres=>{
        this.theatres = theatres;
      });
    }
    else{
      this.loadTheatres();
    }
  }

  
  loadTheatres(): void {
    this.theatreService.getTheatres().subscribe(theatres => {
      this.theatres = theatres;
    });
  }

  openModal(content: any, theatre?: any): void {
    if (theatre) {
      this.isEdit = true;
      this.selectedTheatre = { ...theatre };
    } else {
      this.isEdit = false;
      this.selectedTheatre = {};
    }
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  onSubmit(form: NgForm): void {
    if (form.valid) {
      if (this.isEdit) {
        this.theatreService.editTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      } else {
        this.theatreService.addTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      }
    }
  }

  editTheatre(content: any, theatre: any): void {
    this.openModal(content, theatre);
  }

  deleteTheatre(theatre: any): void {
    if (confirm('Are you sure you want to delete this theatre?')) {
      this.theatreService.deleteTheatre(theatre.id).subscribe(() => {
        this.loadTheatres();
      });
    }
  }

  onCityChange(city:string): void{
    this.selectedCity =city;
    this.loadTheatresByCity(city);
  }
}

Add validations when the user adds a movie he can not enter No. And Special Charectores in the Name and City Text Boxes
