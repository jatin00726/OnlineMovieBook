import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { TheatreService } from '../../services/theatre.service';

@Component({
  selector: 'app-theatres-management',
  templateUrl: './theatres-management.component.html',
  styleUrls: ['./theatres-management.component.css']
})
export class TheatresManagementComponent implements OnInit {
  theatres: any[] = [];
  cities: any[]=['Hyderabad',
    'Delhi',
    'Mumbai',
    'Bangalore',
    'Chennai',
    'Pune',
    'Kolkata'];
  selectedTheatre: any = {};
  selectedCity:string='';
  isEdit = false;

  constructor(
    private modalService: NgbModal,
    private theatreService: TheatreService
  ) {}

  ngOnInit(): void {
   
    this.loadTheatres();
  }

  loadTheatresByCity(city:string):void {
    if(city){
      this.theatreService.getTheatresByCity(city).subscribe(theatres=>{
        this.theatres = theatres;
      });
    }
    else{
      this.loadTheatres();
    }
  }

  
  loadTheatres(): void {
    this.theatreService.getTheatres().subscribe(theatres => {
      this.theatres = theatres;
    });
  }

  openModal(content: any, theatre?: any): void {
    if (theatre) {
      this.isEdit = true;
      this.selectedTheatre = { ...theatre };
    } else {
      this.isEdit = false;
      this.selectedTheatre = {};
    }
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  onSubmit(form: NgForm): void {
    if (form.valid) {
      if (this.isEdit) {
        this.theatreService.editTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      } else {
        this.theatreService.addTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      }
    }
  }

  editTheatre(content: any, theatre: any): void {
    this.openModal(content, theatre);
  }

  deleteTheatre(theatre: any): void {
    if (confirm('Are you sure you want to delete this theatre?')) {
      this.theatreService.deleteTheatre(theatre.id).subscribe(() => {
        this.loadTheatres();
      });
    }
  }

  onCityChange(city:string): void{
    this.selectedCity =city;
    this.loadTheatresByCity(city);
  }
}



The provided code is an Angular component for managing theatres. Below is a detailed line-by-line explanation:

### Import Statements
```typescript
import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { TheatreService } from '../../services/theatre.service';
```
- **Import Statements**: Import necessary Angular modules and services:
  - `Component` and `OnInit` from `@angular/core`.
  - `NgForm` from `@angular/forms`.
  - `NgbModal` from `@ng-bootstrap/ng-bootstrap` for modal dialogs.
  - `TheatreService` from a custom service to handle theatre-related operations.

### Component Decorator
```typescript
@Component({
  selector: 'app-theatres-management',
  templateUrl: './theatres-management.component.html',
  styleUrls: ['./theatres-management.component.css']
})
```
- **@Component Decorator**: Defines the metadata for the component:
  - `selector`: The custom HTML tag for this component.
  - `templateUrl`: The HTML template for the component.
  - `styleUrls`: The CSS file(s) for styling the component.

### Class Definition and Properties
```typescript
export class TheatresManagementComponent implements OnInit {
  theatres: any[] = [];
  cities: any[] = ['Hyderabad', 'Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Pune', 'Kolkata'];
  selectedTheatre: any = {};
  selectedCity: string = '';
  isEdit = false;
```
- **Class Definition**: `TheatresManagementComponent` class which implements `OnInit`.
- **Properties**:
  - `theatres`: An array to store theatre data.
  - `cities`: An array of city names.
  - `selectedTheatre`: An object to hold the currently selected theatre's data.
  - `selectedCity`: A string to store the currently selected city.
  - `isEdit`: A boolean to indicate whether the current operation is editing an existing theatre.

### Constructor
```typescript
  constructor(
    private modalService: NgbModal,
    private theatreService: TheatreService
  ) {}
```
- **Constructor**: Injects dependencies:
  - `modalService` for handling modals.
  - `theatreService` for theatre-related operations.

### Lifecycle Hook
```typescript
  ngOnInit(): void {
    this.loadTheatres();
  }
```
- **ngOnInit**: Lifecycle hook that gets called after the component's view has been initialized. Calls `loadTheatres` to load the theatres initially.

### Methods
```typescript
  loadTheatresByCity(city: string): void {
    if (city) {
      this.theatreService.getTheatresByCity(city).subscribe(theatres => {
        this.theatres = theatres;
      });
    } else {
      this.loadTheatres();
    }
  }
```
- **loadTheatresByCity**: Loads theatres based on the selected city:
  - If a city is selected, it calls `getTheatresByCity` from `theatreService`.
  - If no city is selected, it calls `loadTheatres` to load all theatres.

```typescript
  loadTheatres(): void {
    this.theatreService.getTheatres().subscribe(theatres => {
      this.theatres = theatres;
    });
  }
```
- **loadTheatres**: Loads all theatres by calling `getTheatres` from `theatreService`.

```typescript
  openModal(content: any, theatre?: any): void {
    if (theatre) {
      this.isEdit = true;
      this.selectedTheatre = { ...theatre };
    } else {
      this.isEdit = false;
      this.selectedTheatre = {};
    }
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }
```
- **openModal**: Opens a modal for adding or editing a theatre:
  - If a theatre is passed, it sets `isEdit` to true and copies the theatre data to `selectedTheatre`.
  - If no theatre is passed, it sets `isEdit` to false and initializes `selectedTheatre` as an empty object.
  - Opens the modal with the given content.

```typescript
  onSubmit(form: NgForm): void {
    if (form.valid) {
      if (this.isEdit) {
        this.theatreService.editTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      } else {
        this.theatreService.addTheatre(this.selectedTheatre).subscribe(() => {
          this.loadTheatres();
          this.modalService.dismissAll();
        });
      }
    }
  }
```
- **onSubmit**: Handles form submission for adding or editing a theatre:
  - If the form is valid and `isEdit` is true, it calls `editTheatre` from `theatreService` and then reloads the theatres.
  - If `isEdit` is false, it calls `addTheatre` from `theatreService` and then reloads the theatres.
  - Dismisses the modal after the operation.

```typescript
  editTheatre(content: any, theatre: any): void {
    this.openModal(content, theatre);
  }
```
- **editTheatre**: Opens the modal for editing a theatre by calling `openModal` with the selected theatre.

```typescript
  deleteTheatre(theatre: any): void {
    if (confirm('Are you sure you want to delete this theatre?')) {
      this.theatreService.deleteTheatre(theatre.id).subscribe(() => {
        this.loadTheatres();
      });
    }
  }
```
- **deleteTheatre**: Deletes a theatre:
  - Asks for confirmation before deleting.
  - Calls `deleteTheatre` from `theatreService` and then reloads the theatres.

```typescript
  onCityChange(city: string): void {
    this.selectedCity = city;
    this.loadTheatresByCity(city);
  }
```
- **onCityChange**: Handles the city change event:
  - Updates `selectedCity` with the new city.
  - Calls `loadTheatresByCity` with the selected city.
