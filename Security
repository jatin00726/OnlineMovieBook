To implement cookie-based authentication with ASP.NET Core and integrate it with your Angular frontend, we need to set up the backend to handle login, logout, and user management using cookies. Additionally, we will update the Angular service to use these endpoints.

Here's how to update your backend and Angular service:

### Backend (ASP.NET Core)

1. **Startup Configuration**: Ensure your application is configured to use cookie authentication.

2. **Controllers**: Implement login, logout, and user creation logic.

using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

namespace YourNamespace
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
```

#### 2. Update `AccountController.cs`

```csharp
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class AccountController : ControllerBase
{
    private readonly ApplicationDbContext db;

    public AccountController(ApplicationDbContext context)
    {
        db = context;
    }

    [HttpPost("Login")]
    public async Task<ActionResult> Login(UserModel user)
    {
        var result = GetUserbyNameandPassword(user);
        if (result == null)
        {
            return Unauthorized("Invalid credentials");
        }

        var claims = new List<Claim> {
            new Claim(ClaimTypes.NameIdentifier, Convert.ToString(result.UserId)),
            new Claim(ClaimTypes.Name, result.Username),
            new Claim(ClaimTypes.Role, result.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties());

        return Ok(new { Role = result.Role });
    }

    [HttpPost("CreateUser")]
    public async Task<ActionResult> CreateUser(UserModel user)
    {
        var result = AddUser(user);
        return Ok(new { UserId = result.UserId, Message = "User created successfully" });
    }

    [HttpPost("CreateAdmin")]
    public async Task<ActionResult> CreateAdmin(UserModel user)
    {
        var result = AddAdmin(user);
        return Ok(new { UserId = result.UserId, Message = "Admin created successfully" });
    }

    [HttpGet("GetUserbyNameandPassword")]
    public UserModel GetUserbyNameandPassword(UserModel user)
    {
        return db.Users.FirstOrDefault(u => u.Username == user.Username && u.Password == user.Password);
    }

    [HttpPost("AddUser")]
    public UserModel AddUser(UserModel objUser)
    {
        objUser.Role = "User";
        db.Users.Add(objUser);
        db.SaveChanges();
        return objUser;
    }

    [HttpPost("AddAdmin")]
    public UserModel AddAdmin(UserModel objUser)
    {
        objUser.Role = "Admin";
        db.Users.Add(objUser);
        db.SaveChanges();
        return objUser;
    }

    [HttpPost("Logout")]
    public async Task<IActionResult> LogOut()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        return Ok(new { message = "User logged out" });
    }
}
```

### Angular Frontend

Update the Angular service to handle cookie-based authentication.

#### 1. AuthService

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private authUrl = 'https://localhost:44353/api/Account/';

  constructor(private http: HttpClient) { }

  login(credentials: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}Login`, credentials).pipe(
      tap(response => {
        if (response.role) {
          localStorage.setItem('role', response.role);
        }
      })
    );
  }

  registerUser(user: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}CreateUser`, user);
  }

  registerAdmin(user: any): Observable<any> {
    return this.http.post<any>(`${this.authUrl}CreateAdmin`, user);
  }

  logout(): Observable<any> {
    return this.http.post(`${this.authUrl}Logout`, {}).pipe(
      tap(() => {
        localStorage.removeItem('role');
        this.clearCache();
      })
    );
  }

  isAuthenticated(): boolean {
    // A more robust implementation would involve checking the session on the server side.
    return !!localStorage.getItem('role');
  }

  getUserRole(): string | null {
    return localStorage.getItem('role');
  }

  private clearCache(): void {
    if (caches) {
      caches.keys().then(names => {
        names.forEach(name => caches.delete(name));
      });
    }
  }
}
```

#### 2. Route Guard

Ensure your routes are protected.

```typescript
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (!this.authService.isAuthenticated()) {
      this.router.navigate(['/login']);
      return false;
    }
    return true;
  }
}
```

#### 3. Update Routing Module

```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from './auth.guard';
import { LoginComponent } from './login/login.component';
import { ProtectedComponent } from './protected/protected.component';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'protected', component: ProtectedComponent, canActivate: [AuthGuard] },
  { path: '', redirectTo: '/login', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
```

#### 4. Logout Component/Functionality

```typescript
// navbar.component.ts
import { Component } from '@angular/core';
import { AuthService } from './auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent {

  constructor(private authService: AuthService, private router: Router) {}

  logout(): void {
    this.authService.logout().subscribe(() => {
      this.router.navigate(['/login']);
    });
  }

  isAuthenticated(): boolean {
    return this.authService.isAuthenticated();
  }

  getUserRole(): string | null {
    return this.authService.getUserRole();
  }
}

// navbar.component.html
<ul class="navbar-nav navbar-right">
  <li *ngIf="isAuthenticated()">
    <a class="nav-link" (click)="logout()">Log off</a>
  </li>
</ul>
```

### Conclusion

By setting up cookie-based authentication in your ASP.NET Core backend and updating your Angular frontend to handle login, logout, and authentication checks, you can create a secure authentication flow. Ensure to protect all necessary routes and clear caches as needed to prevent unauthorized access after logout.

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav id="sidebarMenu" class="sidebar">
      <div class="position-sticky">
        <ul class="nav flex-column">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" routerLink="/admin">
              Dashboard
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/admin/movies">
              Manage Movies
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/admin/theatres">
              Manage Theatres
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/admin/shows">
              Manage Shows
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <!-- Main content -->
    <main id="mainContent" class="main-content">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom tran">
        <button class="toggle-button" (click)="toggleSidebar()">â˜°</button>
        <h1 class="h2">Admin Dashboard</h1>
        <!-- <button class="btn btn-danger" (click)="logout()">Logout</button> -->
        <ul class="navbar-nav navbar-right">
          <li *ngIf="isAuthenticated()">
            <a class="nav-link" (click)="logout()">Log off</a>
          </li>
        </ul>
      </div>
      <router-outlet></router-outlet>
    </main>
  </div>
</div>

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav id="sidebarMenu" class="sidebar">
      <div class="position-sticky">
        <ul class="nav flex-column">
          <li class="nav-item" *ngif="isAuthenticated()">
            <a class="nav-link active" aria-current="page" routerLink="/admin" >
              Dashboard
            </a>
          </li>
          <li class="nav-item" *ngif="isAuthenticated()">
            <a class="nav-link" routerLink="/admin/movies" >
              Manage Movies
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/admin/theatres" >
              Manage Theatres
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/admin/shows">
              Manage Shows
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <!-- Main content -->
    <main id="mainContent" class="main-content">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom tran">
        <button class="toggle-button" (click)="toggleSidebar()">â˜°</button>
        <h1 class="h2">Admin Dashboard</h1>
        <!-- <button class="btn btn-danger" (click)="logout()">Logout</button> -->
        <ul class="navbar-nav navbar-right">
          <li *ngIf="isAuthenticated()">
            <button class="btn btn-danger" (click)="logout()">Log off</button>
          </li>
        </ul>
      </div>
      <router-outlet></router-outlet>
    </main>
  </div>
</div>
core.mjs:10086  NG0303: Can't bind to 'ngif' since it isn't a known property of 'li' (used in the '_AdminDashboardComponent' component template).
1. If 'li' is an Angular component and it has the 'ngif' input, then verify that it is a part of an @NgModule where this component is declared.
2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.
